# -*- coding: utf-8 -*-
"""Bioinformatics_Final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nlxqj3uSYnxwT6ERnPPIGG9JvVct-3wO
"""

from google.colab import files
uploaded = files.upload()

"""# <font color='#edca82'>***Imports***</font>

"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import csv
from matplotlib.ticker import ScalarFormatter  # Import ScalarFormatter
import matplotlib.gridspec as gridspec
from sklearn.preprocessing import StandardScaler
from scipy.stats import pearsonr
from sklearn.cluster import KMeans
from sklearn.preprocessing import quantile_transform
from scipy.stats import shapiro
import scipy.stats as stats
import statsmodels.api as sm
from prettytable import PrettyTable
from statsmodels.stats import multitest
from tabulate import tabulate
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from sklearn.linear_model import Ridge,Lasso
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt



# edca82 097770 f5beb4

"""# <font color='#edca82'>***Lung Analysis***</font>

## <font color='#097770'>***I. Extracting Datasets***</font>

### <font color='#f5beb4'>***A. Normal Lung Dataset***</font>
"""

# Define the file path for the normal lung dataset
path_to_normal_txt = 'lusc-rsem-fpkm-tcga_paired.txt'

# Load the data from the .TXT file into a DataFrame
# We assume that the data is tab-separated (sep='\t')
normal_lung_df = pd.read_csv(path_to_normal_txt, sep='\t')

# Print the shape (dimensions) of the Normal Lung Dataset
print(f'Shape of Normal Lung Dataset: {normal_lung_df.shape}\n')

# Separator line for clarity
print('----------------------------------------------\n')

normal_lung_df

# Now, the 'normal_lung_df' DataFrame contains the data from the specified file

"""### <font color='#f5beb4'>***B. Cancerous Lung Dataset***</font>"""

# Define file paths for the cancerous datasets
path_to_cancerous_txt = 'lusc-rsem-fpkm-tcga-t_paired.txt'

# Load the data from the .TXT files into DataFrames
# We assume that the data is tab-separated (sep='\t')
cancerous_lung_df = pd.read_csv(path_to_cancerous_txt, sep='\t')

# Print the shape (dimensions) of the Cancerous Lung Dataset
print(f'Shape of Cancerous Lung Dataset: {cancerous_lung_df.shape}\n')

# Separator line for clarity
print('----------------------------------------------\n')

cancerous_lung_df
# Now, the 'cancerous_lung_df' DataFrame contains the data from the specified file

"""## <font color='#097770'>***II. Calculating Difference Between Normal and Cancerous Gene Expression Levels***</font>

### <font color='#f5beb4'>***A. Concatenating Normal and Cancerous Gene Expression Levels***</font>
"""

# Get the list of all genes
allGenes_lung = normal_lung_df['Hugo_Symbol'].unique()

# Initialize a dictionary to store expression levels with gene names as keys
exprLung_data = {}

# Iterate through all genes
for gene in allGenes_lung:
    # Get the expression levels for the current gene
    normalLung_expression = normal_lung_df[normal_lung_df['Hugo_Symbol'] == gene].iloc[:, 2:].values.flatten()
    cancerousLung_expression = cancerous_lung_df[cancerous_lung_df['Hugo_Symbol'] == gene].iloc[:, 2:].values.flatten()

    # Store the expression levels in the dictionary with the gene name as the key
    exprLung_data[gene] = {
        'Normal': normalLung_expression,
        'Cancerous': cancerousLung_expression
    }

# Now exprLung_data is a dictionary where each key is a gene name, and the value is a dictionary
# containing 'Normal' and 'Cancerous' expression levels as NumPy arrays
# You can access the data for a specific gene using its name as the key

print('Printing a sample of our normal and cancerous expression levels concatenated with their corresponding gene:\n')

# Iterate through the first five genes and their expression data
# Initialize a table to display the gene expression data
table = PrettyTable()

# Define the column names for the table
table.field_names = ['Gene', 'Normal Expression', 'Cancerous Expression']

# Iterate through the first five genes and their expression data
for i, (gene, expression_data) in enumerate(exprLung_data.items()):
    if i >= 5:  # Stop after the first five genes
        break
    # Add the data for the current gene to the table
    table.add_row([gene, expression_data['Normal'], expression_data['Cancerous']])

# Print the table
print(table)

numValues_per_gene_lung = len(next(iter(exprLung_data.values()))['Normal'])

# Print the shape of exprLung_data
print(f'Shape of exprLung_data: {len(exprLung_data)} genes x {numValues_per_gene_lung} values per gene')

"""### <font color='#f5beb4'>***B. Handling Null Values***</font>"""

# Initialize a list to store the indices of genes with more than or equal 50% zeros
genes_with_more_than_50_percent_zeros_lung = []

# Iterate through all genes
for i, gene in enumerate(exprLung_data):
    # Get the normal expression levels for the current gene
    normal_expression = exprLung_data[gene]['Normal']
    cancerous_expression = exprLung_data[gene]['Cancerous']

    # Count the number of zeros for normal and cancerous expressions
    num_zeros_normal = len(normal_expression[normal_expression == 0])
    num_zeros_cancerous = len(cancerous_expression[cancerous_expression == 0])

    # Calculate the percentage of zeros for normal and cancerous expressions
    percentage_zerosNormal = (num_zeros_normal / len(normal_expression)) * 100
    percentage_zerosCancerous = (num_zeros_cancerous / len(cancerous_expression)) * 100

    # Check if the percentage of zeros is more than 50% for both normal and cancerous expressions
    if percentage_zerosNormal >= 50 or percentage_zerosCancerous >= 50:
        genes_with_more_than_50_percent_zeros_lung.append(i)

# Filter out genes with more than 50% zeros from exprLung_data
allGenes_lung_filtered = [gene for i, gene in enumerate(exprLung_data) if i not in genes_with_more_than_50_percent_zeros_lung]  #3ayza akhod dol wa2semhom tany ba2a wbasehom lshapiro mafsolen

# Get the list of genes that were filtered out
filteredGenes_Lung = [gene for i, gene in enumerate(exprLung_data) if i in genes_with_more_than_50_percent_zeros_lung]

# Create new dictionaries to store the filtered and removed data
exprLung_data_filteredGenes = {gene: exprLung_data[gene] for gene in allGenes_lung_filtered}
exprLung_data_removedGenes = {gene: exprLung_data[gene] for gene in filteredGenes_Lung}

# Print the number of filtered and removed genes
print(f"Number of filtered genes: {len(exprLung_data_filteredGenes)}")
print(f"Number of removed genes: {len(exprLung_data_removedGenes)}","\n")

# Separator line for clarity
print('----------------------------------------------\n')

# Printing out a sample of removed genes
print('A sample of first 10 genes removed for having null values greater than or equal 50%:\n')

# Get the list of genes in exprLung_data_removedGenes
genes_in_removedGenes = list(exprLung_data_removedGenes.keys())

# Iterate over the first ten genes in exprLung_data_removedGenes
# Create a list of lists to hold the data
data = []

# Populate the data list with the first ten genes and their indices
for i, gene in enumerate(genes_in_removedGenes[:10]):
    if i >= 10:
        break
    index_in_exprLung_data = list(exprLung_data.keys()).index(gene)
    data.append([gene, index_in_exprLung_data+1])

# Print the table using tabulate
print(tabulate(data, headers=["Gene Name", "Index in exprLung_data"], tablefmt="pretty"))

"""### <font color='#f5beb4'>***C. Calculating Differences Between Normal and Cancerous Gene Expression Levels***</font>"""

# Initialize a list to store the differences
exprLung_differences = []

# Iterate through the genes
for gene, expression_data in exprLung_data_filteredGenes.items():
    # Get the normal and cancerous expression levels
    normal_levels = expression_data['Normal']
    cancerous_levels = expression_data['Cancerous']

    # Calculate the differences for each gene
    differences = cancerous_levels - normal_levels

    # Add the differences to the list
    exprLung_differences.append((gene, differences))

# Now exprLung_differences contains the gene name and the corresponding differences for each gene
print('Printing a sample of difference between normal and cancerous expression levels concatenated with their corresponding gene:\n')

# Print the first five lists
# Define the table
table = PrettyTable()
table.field_names = ["Gene", "Differences"]

# Populate the table with the first five genes and their differences
for gene, differences in exprLung_differences[:5]:
    table.add_row([gene, differences])

# Print the table
print(table)

# Check the shape of exprLung_differences
print(f'Shape of exprLung_differences: {len(exprLung_differences)} genes x {len(exprLung_differences[0][1])} values per gene')

"""## <font color='#097770'>***III. Normality Test [Wilk Shapiro Test]***</font>

### <font color='#f5beb4'>***Case [A]. Samples Are Paired***</font>
"""

# Initialize lists to store genes based on normality test results
normalLung_diff = []  # List to store genes with normal distribution
non_normalLung_diff = []  # List to store genes without normal distribution

# Function for Shapiro-Wilk normality test
def normality_test(gene, data, alpha=0.05):
    """
    Performs the Shapiro-Wilk normality test on a dataset.

    Args:
        data (array-like): The dataset to be tested for normality.
        alpha (float, optional): The significance level for the test. Defaults to 0.05.

    Returns:
        None: Appends the gene and its data to normal_diff or non_normal_diff based on the test result.
    """
    #calculating the test statistics and the p value with the Shapiro-Wilk function from library
    shapiro_statistics, shapiro_p = stats.shapiro(data)

    # Seeing the significance level with the p value output from the function
    if shapiro_p > alpha:
        normalLung_diff.append((gene, data))
    elif shapiro_p < alpha:
        non_normalLung_diff.append((gene, data))

# Applying the normality test to each gene's differences
for gene, differences in exprLung_differences:
    normality_test(gene, differences)


# Count how many genes passed and did not pass the normality test and printing them
print(f"Number of genes with normal distribution: {len(normalLung_diff)}")
print(f"Number of genes without normal distribution: {len(non_normalLung_diff)}")

# Separator line for clarity
print('----------------------------------------------\n')

# Conclusion
print("Conclusion:")
print("Since genes that exhibit non-normal distributions are greater,")
print("the hypothesis testing will be performed using the Wilcoxon Signed-Rank Test.")

"""### <font color='#f5beb4'>***Case [B]. Samples Are Independent***</font>

#### <font color='#DCDC91'>***A. Separating `allGenes_lung_filtered` list into normal and cancerous genes after handling null values***</font>
"""

normal_genes_filtered = []
cancerous_genes_filtered = []

for i, gene in enumerate(allGenes_lung_filtered):
    normal_expression = exprLung_data[gene]['Normal']
    cancerous_expression = exprLung_data[gene]['Cancerous']

    # Add normal and cancerous expressions to the respective lists
    normal_genes_filtered.append(normal_expression)
    cancerous_genes_filtered.append(cancerous_expression)

# Print a sample of normal_genes_filtered
print('Printing a sample of normal gene expressions:\n')

# Define the table
normal_table = PrettyTable()
normal_table.field_names = ["Gene", "Expression Levels"]

# Populate the table with the first five genes and their expression levels
for gene, expression_levels in zip(allGenes_lung_filtered[:5], normal_genes_filtered[:5]):
    normal_table.add_row([gene, expression_levels])

# Print the table
print(normal_table)

# Check the length of normal_genes_filtered
normal_genes_length = len(normal_genes_filtered)
print(f'Length of normal_genes_filtered: {normal_genes_length}')

# Separator line for clarity
print('----------------------------------------------\n')

# Print a sample of cancerous_genes_filtered
print('Printing a sample of cancerous gene expressions:\n')

# Define the table
cancerous_table = PrettyTable()
cancerous_table.field_names = ["Gene", "Expression Levels"]

# Populate the table with the first five genes and their expression levels
for gene, expression_levels in zip(allGenes_lung_filtered[:5], cancerous_genes_filtered[:5]):
    cancerous_table.add_row([gene, expression_levels])

# Print the table
print(cancerous_table)

# Check the length of cancerous_genes_filtered
print(f'Length of cancerous_genes_filtered: {len(cancerous_genes_filtered)}')

"""#### <font color='#DCDC91'>***B. Performing Normality Test On Both Datasets.***</font>"""

# Initialize lists to store genes based on normality test results
normal_normal_genes = []      # List to store normal genes with normal distribution
non_normal_normal_genes = []  # List to store normal genes without normal distribution
normal_cancerous_genes = []   # List to store cancerous genes with normal distribution
non_normal_cancerous_genes = []  # List to store cancerous genes without normal distribution

# Function for Shapiro-Wilk normality test
def normality_test(data, gene_name, alpha=0.05):
    """
    Performs the Shapiro-Wilk normality test on a dataset.

    Args:
        data (array-like): The dataset to be tested for normality.
        gene_name (str): The name of the gene.
        alpha (float, optional): The significance level for the test. Defaults to 0.05.

    Returns:
        None: Appends the gene name and its data to the appropriate lists based on the test result.
    """
    # Calculating the test statistics and the p value with the Shapiro-Wilk function from the library
    shapiro_statistics, shapiro_p = stats.shapiro(data)

    # Seeing the significance level with the p-value output from the function
    if shapiro_p > alpha:
        return True  # Indicates normal distribution
    else:
        return False  # Indicates non-normal distribution

# Applying the normality test to normal_genes_filtered
for gene, expression_levels in zip(allGenes_lung_filtered, normal_genes_filtered):
    if normality_test(expression_levels, gene):
        normal_normal_genes.append(gene)
    else:
        non_normal_normal_genes.append(gene)

# Applying the normality test to cancerous_genes_filtered
for gene, expression_levels in zip(allGenes_lung_filtered, cancerous_genes_filtered):
    if normality_test(expression_levels, gene):
        normal_cancerous_genes.append(gene)
    else:
        non_normal_cancerous_genes.append(gene)

# Print the results
print("Results of Shapiro-Wilk normality test for Normal Genes:")
print(f"Number of genes with normal distribution: {len(normal_normal_genes)}")
print(f"Number of genes without normal distribution: {len(non_normal_normal_genes)}")

# Separator line for clarity
print('----------------------------------------------\n')

print("Results of Shapiro-Wilk normality test for Cancerous Genes:")
print(f"Number of genes with normal distribution: {len(normal_cancerous_genes)}")
print(f"Number of genes without normal distribution: {len(non_normal_cancerous_genes)}")

# Separator line for clarity
print('----------------------------------------------\n')

# Conclusion
print("Conclusion:")
print("Since both normal and cancerous genes exhibit non-normal distributions,")
print("the hypothesis testing will be performed using the Wilcoxon Rank-Sum Test.")

"""## <font color='#097770'>***IV. Identifying DEGs***</font>

### <font color='#f5beb4'>***A. Using Hypothesis Testing {has2al eldr asdo eh breport de a-export csv files ya3ny wala report kalam nazary && hat2ked 3ady ba3d elcorrection mayb2ash fe far2 fl3adad bta3 elsignificant genes}***</font>

#### <font color='#DCDC91'>***Case [A]. Samples Are Paired [Wilcoxon: Signed-Rank test]***</font>
---
* Null Hypothesis (Ho): There is no difference in gene expression between normal and cancerous conditions.
* Alternative Hypothesis (Ha): There is a difference in gene expression between normal and cancerous conditions.
"""

# Initialize lists to store the test results
wilcoxon_significant_lung = []
wilcoxon_not_significant_lung = []
alpha = 0.05

def wilcoxon_signed_rank_test(data, alpha=0.05):

    """
    a function to do the signed rank wilcoxon test on the dataset.
    as after the normality test, the data was partially normal and partially non normal

    Arguments:
        data : array like structure that takes in the data that will be tested
        alpha : it's The significance level for the test. Defaults to 0.05.
    Returns:
    doesn't return a value, it just appends in the lists

    """

    # Perform the Wilcoxon signed rank test
    test_statistic, p_value = stats.wilcoxon(data)

    # Check if the p-value is less than the significance level
    if p_value < alpha:
        wilcoxon_significant_lung.append((gene, test_statistic, p_value))
    elif p_value > alpha:
        wilcoxon_not_significant_lung.append((gene, test_statistic, p_value))

# Applying the Wilcoxon signed rank test to each gene's differences that passed the normality test
for gene, differences in exprLung_differences:
    wilcoxon_signed_rank_test(differences)

# wilcoxon_results shall contains the gene name, test statistic, and p-value for each gene

# Check the number of significant genes after the Wilcoxon signed rank test

print(f"Number of significant genes: {len(wilcoxon_significant_lung)}")
print(f"Number of non significant genes: {len(wilcoxon_not_significant_lung)}")

import matplotlib.pyplot as plt


# Extracting p-values for plotting
significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_significant_lung]
non_significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_not_significant_lung]

# Plotting
plt.figure(figsize=(10, 6))
plt.boxplot([significant_pvalues, non_significant_pvalues], labels=['Significant', 'Non-Significant'])
plt.yscale('log')  # Set the y-axis to a logarithmic scale for better visualization
plt.title('Box Plot of Wilcoxon Signed-Rank Test P-Values')
plt.ylabel('P-Value (log scale)')
plt.axhline(y=0.05, color='r', linestyle='--', label='Alpha = 0.05')  # Adding the alpha line
plt.legend()
plt.grid(True)
plt.show()

"""##### <font color='#9CDCFE'>***Hypothesis Testing Correction & Identifying DEGs***</font>"""

# Extract the p-values from wilcoxon_significant_lung
p_values = [p_value for _, _, p_value in wilcoxon_significant_lung]

# Perform FDR correction
reject, corrected_p_values, _, _ = multitest.multipletests(p_values, alpha=0.05, method='fdr_bh')

# Update the wilcoxon_significant_lung list with corrected p-values
wilcoxon_significant_lung_corrected = []

for i, gene_data in enumerate(wilcoxon_significant_lung):
    if len(gene_data) >= 3:  # Check if the tuple has at least 3 elements
        gene, test_statistic, p_value = gene_data
        corrected_p_value = corrected_p_values[i]
        wilcoxon_significant_lung_corrected.append((gene, test_statistic, p_value, corrected_p_value))

# Display a sample of differences before and after FDR correction (first 10 genes)
sample_size = 10
table_before = PrettyTable()
table_before.field_names = ["Gene", "Test Statistic", "P-value"]
table_before.add_rows(wilcoxon_significant_lung[:sample_size])
print("Before FDR Correction:")
print(table_before)

table_after = PrettyTable()
table_after.field_names = ["Gene", "P-value (Uncorrected)", "Corrected P-value", "Significant"]
table_after.add_rows([(gene, p_value, corrected_p_value, corrected_p_value < alpha) for gene, _, p_value, corrected_p_value in wilcoxon_significant_lung_corrected[:sample_size]])
print("\nAfter FDR Correction:")
print(table_after)

# Check the number of corrected genes after FDR correction
print(f"\nNumber of DEGs (FDR) of Lung Dataset: {len(wilcoxon_significant_lung_corrected)}")

import matplotlib.pyplot as plt

# Extracting p-values for plotting
significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_significant_lung]
non_significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_not_significant_lung]
corrected_pvalues = [corrected_pvalue for _, _, _, corrected_pvalue in wilcoxon_significant_lung_corrected]
# Plotting
plt.figure(figsize=(10, 6))
plt.boxplot([significant_pvalues, non_significant_pvalues,corrected_pvalues], labels=['Significant', 'Non-Significant','Corrected'])
plt.yscale('log')  # Set the y-axis to a logarithmic scale for better visualization
plt.title('Box Plot of Wilcoxon Signed-Rank Test P-Values')
plt.ylabel('P-Value (log scale)')
plt.axhline(y=0.05, color='r', linestyle='--', label='Alpha = 0.05')  # Adding the alpha line

plt.legend()
plt.grid(True)
plt.show()

"""#### <font color='#DCDC91'>***Case [B]. Samples Are Independent [Wilcoxon: Rank-Sum Test]***</font>
---
* Null Hypothesis (Ho): There is no difference in gene expression between normal and cancerous conditions.
* Alternative Hypothesis (Ha): There is a difference in gene expression between normal and cancerous conditions.

"""

from scipy.stats import ranksums

# Initialize lists to store the test results
wilcoxon_rankSum_significant_lung = []
wilcoxon_rankSum_not_significant_lung = []
alpha = 0.05

def wilcoxon_rank_sum_test(data1, data2, gene, alpha=0.05):
    """
    Performs the Wilcoxon Rank-Sum Test on two datasets.

    Args:
        data1 (array-like): The first dataset to be tested.
        data2 (array-like): The second dataset to be tested.
        gene (str): The name of the gene.
        alpha (float, optional): The significance level for the test. Defaults to 0.05.

    Returns:
        None: Appends the gene name, test statistic, and p-value to the appropriate lists based on the test result.
    """
    # Perform the Wilcoxon Rank-Sum Test
    test_statistic, p_value = ranksums(data1, data2)

    # Check if the p-value is less than the significance level
    if p_value < alpha:
        wilcoxon_rankSum_significant_lung.append((gene, test_statistic, p_value))
        # print(f"{gene}: Significant difference detected (p-value = {p_value:.4f})")
    else:
        wilcoxon_rankSum_not_significant_lung.append((gene, test_statistic, p_value))
        # print(f"{gene}: No significant difference detected (p-value = {p_value:.4f})")

# Applying the Wilcoxon Rank-Sum Test to each gene's data
for gene, normal_data, cancerous_data in zip(allGenes_lung_filtered, normal_genes_filtered, cancerous_genes_filtered):
    wilcoxon_rank_sum_test(normal_data, cancerous_data, gene)

# Check the number of significant genes after the Wilcoxon Rank-Sum Test

print(f"\nNumber of significant genes: {len(wilcoxon_rankSum_significant_lung)}")
print(f"Number of non-significant genes: {len(wilcoxon_rankSum_not_significant_lung)}")

import matplotlib.pyplot as plt


# Extracting p-values for plotting
significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_rankSum_significant_lung]
non_significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_rankSum_not_significant_lung]

# Plotting
plt.figure(figsize=(10, 6))
plt.boxplot([significant_pvalues, non_significant_pvalues], labels=['Significant', 'Non-Significant'])
plt.yscale('log')  # Set the y-axis to a logarithmic scale for better visualization
plt.title('Box Plot of Wilcoxon Rank sum Test P-Values')
plt.ylabel('P-Value (log scale)')
plt.axhline(y=0.05, color='r', linestyle='--', label='Alpha = 0.05')  # Adding the alpha line
plt.legend()
plt.grid(True)
plt.show()

"""##### <font color='#9CDCFE'>***Hypothesis Testing Correction & Identifying DEGs***</font>"""

# Extract p-values for FDR correction
p_values = [p_value for _, _, p_value in wilcoxon_rankSum_significant_lung]

# Perform FDR correction
rejected, corrected_p_values, _, _ = multitest.multipletests(p_values, alpha=alpha, method='fdr_bh')

# Filter out non-significant genes after FDR correction
sig_genes_after_fdr = [gene for gene, p_value, corrected_p_value in zip(wilcoxon_rankSum_significant_lung, p_values, corrected_p_values) if corrected_p_value < alpha]

# Display a sample of differences before and after FDR correction (first 10 genes)
sample_size = 10
table_before = PrettyTable()
table_before.field_names = ["Gene", "Test Statistic", "P-value"]
table_before.add_rows(wilcoxon_rankSum_significant_lung[:sample_size])
print("Before FDR Correction:")
print(table_before)

table_after = PrettyTable()
table_after.field_names = ["Gene", "P-value (Uncorrected)", "Corrected P-value", "Significant"]
table_after.add_rows([(gene, p_value, corrected_p_value, corrected_p_value < alpha) for gene, p_value, corrected_p_value in zip(wilcoxon_rankSum_significant_lung[:sample_size], p_values[:sample_size], corrected_p_values[:sample_size])])
print("\nAfter FDR Correction:")
print(table_after)

# Check the number of significant genes after FDR correction
significant_genes_lung = len(sig_genes_after_fdr)
non_significant_genes_lung = len(wilcoxon_rankSum_significant_lung) - significant_genes_lung
print(f"\nNumber of significant genes after FDR correction: {significant_genes_lung}")

import matplotlib.pyplot as plt

# Extracting p-values for plotting
significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_rankSum_significant_lung]
non_significant_pvalues = [pvalue for _, _, pvalue in wilcoxon_rankSum_not_significant_lung]
corrected_pvalues = [corrected_pvalue for _, _, corrected_pvalue in sig_genes_after_fdr]
# Plotting
plt.figure(figsize=(10, 6))
plt.boxplot([significant_pvalues, non_significant_pvalues,corrected_pvalues], labels=['Significant', 'Non-Significant','Corrected'])
plt.yscale('log')  # Set the y-axis to a logarithmic scale for better visualization
plt.title('Box Plot of Wilcoxon Rank-Sum Test P-Values')
plt.ylabel('P-Value (log scale)')
plt.axhline(y=0.05, color='r', linestyle='--', label='Alpha = 0.05')  # Adding the alpha line

plt.legend()
plt.grid(True)
plt.show()

"""### <font color='#f5beb4'>***B. Using Fold Change***</font>"""

import numpy as np

# Initialize a list to store the log2 fold change values
fc_values = []
non_significant_fc = []
significant_fc = []
all_genes_fc=[]
# Iterate through the genes
for gene, expression_data in exprLung_data_filteredGenes.items():
    # Get the normal and cancerous expression levels
    normal_levels = expression_data['Normal']
    cancerous_levels = expression_data['Cancerous']

    # Add a small constant to both numerator and denominator to avoid division by zero to avoid infinity log2 FC
    epsilon = 1e-8
    normal_levels = np.where(normal_levels == 0, epsilon, normal_levels)
    cancerous_levels = np.where(cancerous_levels == 0, epsilon, cancerous_levels)

    # Calculate the log2 fold change values
    values = np.log2(np.divide(cancerous_levels, normal_levels))

    # Add the gene to the appropriate list based on a threshold
    threshold = np.log2(1.5)
    if abs(np.mean(values)) < threshold:
        non_significant_fc.append((gene,np.mean(values)))
        all_genes_fc.append((gene,np.mean(values)))
    else:
        significant_fc.append((gene,np.mean(values)))
        all_genes_fc.append((gene,np.mean(values)))

print("Number of DEGS by FC",len(significant_fc))
# Print the first five lists
# Define the table
table = PrettyTable()
table.field_names = ["Gene", "log2 FC"]

# Populate the table with the first five genes and their differences
for gene, values in significant_fc[:5]:
    table.add_row([gene, values])

# Print the table
print(table)

# Extract gene names from both sets
genes_wilcoxon = set(gene for gene, _, _, _ in wilcoxon_significant_lung_corrected)
genes_fc = set(gene for gene, _ in significant_fc)

# Find common genes
common_genes = genes_wilcoxon.intersection(genes_fc)

print(len(common_genes))

# Create dictionaries to store corrected p-values and log2 fold change values for common genes
common_genes_data = {}

# Populate dictionaries with data
for gene_wilcoxon in wilcoxon_significant_lung_corrected:
    gene, _, _, corrected_p_value = gene_wilcoxon

    # Check if the gene is also in the log2 fold change set
    fc_data = next((data for data in significant_fc if data[0] == gene), None)

    if fc_data:
        _, fc_values = fc_data

        # Add data to the dictionary
        common_genes_data[gene] = {"corrected_p_value": corrected_p_value, "log2_fold_change": fc_values}

# Print the common genes and their data
table_common_genes = PrettyTable()
table_common_genes.field_names = ["Gene", "Corrected P-value", "Log2 Fold Change"]

for gene, data in common_genes_data.items():
    table_common_genes.add_row([gene, data["corrected_p_value"], data["log2_fold_change"]])

print("Common Genes and Their Data:")
print(table_common_genes[:5])

import csv


# Specify the file path for the CSV file
csv_file_path = '/content/common_genes_data.csv'

# Open the CSV file in write mode
with open(csv_file_path, 'w', newline='') as csv_file:
    # Create a CSV writer object
    csv_writer = csv.writer(csv_file)

    # Write the header row
    csv_writer.writerow(["Gene", "Corrected P-value", "Log2 Fold Change"])

    # Write data rows
    for gene, data in common_genes_data.items():
        csv_writer.writerow([gene, data["corrected_p_value"], data["log2_fold_change"]])

# Print the path of the generated CSV file
print(f"CSV file generated: {csv_file_path}")

from google.colab import files

# Specify the file path for the CSV file
csv_file_path = '/content/common_genes_data.csv'

# Trigger the download of the CSV file
files.download(csv_file_path)

import pandas as pd
import numpy as np
from google.colab import files

# Read the CSV file into a DataFrame
df = pd.read_csv('/content/common_genes_data.csv')

# Assuming the dictionary with the required values is named common_genes_data

# Add a "Ranking" column to the DataFrame
df['Ranking'] = -np.log10(df['Corrected P-value']) * df['Log2 Fold Change']

# Sort the DataFrame by the "Ranking" column in descending order
df_sorted = df.sort_values(by='Ranking', ascending=False).reset_index(drop=True)

df_sorted

ranking = df_sorted[['Gene', 'Ranking']]
ranking

!pip install gseapy

import gseapy as gp

gp.get_library_name()
# pre_res = gp.prerank(rnk='ranking', gene_sets='Cancer_Cell_Line_Encyclopedia', seed=6, permutation_num=100)
pre_res = gp.prerank(rnk = ranking, gene_sets = 'Cancer_Cell_Line_Encyclopedia', seed = 6, permutation_num = 100)
pre_res
out = []

for term in list(pre_res.results):
    out.append([term,
               pre_res.results[term]['fdr'],
               pre_res.results[term]['es'],
               pre_res.results[term]['nes']])

out_df = pd.DataFrame(out, columns = ['Term','fdr', 'es', 'nes']).sort_values('fdr').reset_index(drop = True)
out_df

from gseapy.plot import gseaplot

# Specify the gene set term you want to visualize
gene_set_term = "NCIH1651 LUNG"

# Plot the GSEA results for the specific gene set term "NCIH1651 LUNG"
gseaplot(ranks=pre_res.ranking, term=gene_set_term, **pre_res.results[gene_set_term])

# Show the plot
plt.show()

"""### <font color='#f5beb4'>***C. Using Volcano Plots {hena hastakhdem men elhypothesis testing method elpaired method case}***</font>"""

import numpy as np

# Create a dictionary for log2 fold change values with genes as keys
fc_dict = dict(all_genes_fc)

# Initialize a list to store corrected p and log2 fold change values
volcano_data = []

# Iterate through the genes with corrected p-values
for gene, _, p_value, corrected_p_value in wilcoxon_significant_lung_corrected:
    # Find the log2 fold change values for the gene using the dictionary
    if gene in fc_dict:
        values = fc_dict[gene]
        # Append gene, corrected p-value, and log2 fold change to the list
        volcano_data.append((gene, corrected_p_value, values))

# Print the first few rows of the volcano data
for gene, corrected_p_value, log2_fold_change in volcano_data[:10]:
    print(f"Gene: {gene}, Corrected P-value: {corrected_p_value}, Log2 Fold Change: {log2_fold_change}")

import numpy as np
import matplotlib.pyplot as plt

# Assuming you have the 'volcano_data' list from the previous code

# Unpack the data for plotting
genes, corrected_p_values, log2_fold_changes = zip(*volcano_data)

# Set a significance threshold (you can adjust this)
significance_threshold = 0.05

# Determine the direction of log2 fold change
# total_indices=[i for i, p_value in enumerate(-np.log10(corrected_p_values))]
left_indices = [i for i, fold_change in enumerate(log2_fold_changes) if fold_change > 0.6]
right_indices = [i for i, fold_change in enumerate(log2_fold_changes) if fold_change < -0.6]
gray_indices = [i for i, fold_change in enumerate(log2_fold_changes) if -0.6 < fold_change < 0.6]
low_p_value_indices = [i for i, p_value in enumerate(-np.log10(corrected_p_values)) if p_value < 2]

# Plot the volcano plot
plt.figure(figsize=(10, 6))
# plt.scatter(np.array(log2_fold_changes)[total_indices], -np.log10(np.array(corrected_p_values)[total_indices]), c='black', label='Log2 Fold Change > 0.6', alpha=1)
# Plot left points in red
plt.scatter(np.array(log2_fold_changes)[left_indices], -np.log10(np.array(corrected_p_values)[left_indices]), c='red', label='Log2 Fold Change > 0.6', alpha=0.5)

# Plot right points in blue
plt.scatter(np.array(log2_fold_changes)[right_indices], -np.log10(np.array(corrected_p_values)[right_indices]), c='blue', label='Log2 Fold Change < -0.6', alpha=0.5)

# Plot gray points between -1 and 1 in gray
plt.scatter(np.array(log2_fold_changes)[gray_indices], -np.log10(np.array(corrected_p_values)[gray_indices]), c='gray', label='-0.6 <= Log2 Fold Change <= 0.6', alpha=0.5)

# Highlight points with -log10(corrected p-values) below 2 in gray
plt.scatter(np.array(log2_fold_changes)[low_p_value_indices], -np.log10(np.array(corrected_p_values)[low_p_value_indices]), c='gray', label='-log10 Corrected P-value < 2', alpha=1)
# Add dashed lines to separate regions
plt.axvline(x=-0.6, color='k', linestyle='--', linewidth=1)
plt.axvline(x=0.6, color='k', linestyle='--', linewidth=1)
plt.axhline(y=2, color='k', linestyle='--', linewidth=1)

# Add labels and title
plt.xlabel('Log2 Fold Change')
plt.ylabel('-Log10 Corrected P-value')
plt.title('Volcano Plot')
plt.legend()

# Show the plot
plt.show()

"""## <font color='#097770'>***VII. Exporting The Results***</font>"""

# # Define the path for the CSV file
# csv_path = 'corrected-wilcoxon-significant-lung.csv'

# # Write wilcoxon_significant_lung to the CSV file
# with open(csv_path, 'w', newline='') as csvfile:
#     fieldnames = ['Gene', 'Test Statistic', 'p-value', 'Adjusted p-value']
#     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
#     writer.writeheader()

#     for gene, test_statistic, p_value, adj_p_value in wilcoxon_significant_lung:
#         writer.writerow({'Gene': gene, 'Test Statistic': test_statistic, 'p-value': p_value, 'Adjusted p-value': adj_p_value})

# # Define the path for the TXT file
# txt_path = 'wilcoxon-significant-lung.txt'

# # Write wilcoxon_significant_lung to the TXT file
# with open(txt_path, 'w') as txtfile:
#     for gene, test_statistic, p_value, adj_p_value in wilcoxon_significant_lung:
#         txtfile.write(f"Gene: {gene}, Test Statistic: {test_statistic}, p-value: {p_value}, Adjusted p-value: {adj_p_value}\n")

# print("Exported wilcoxon_significant_lung as CSV and TXT files.")